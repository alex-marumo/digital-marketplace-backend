---

## Business Rules

### **User & Account Management**

- **Unique Registration & Verification:**
  - Users must register with a unique email address via `/api/pre-register`, protected by Google reCAPTCHA to block bots.
  - A 6-digit verification code is sent to the user’s email, valid for 1 hour to account for email delivery delays (`/api/verify-email-code`). Successful verification sets `is_verified = true` and updates `status` to `pending_role_selection`.
  - On signup, users are inserted into the `users` table with defaults: `role = 'buyer'`, `trust_level = NEW` (0), `status = pending_email_verification`.
  - Unverified users can request a new code via `/api/resend-verification-code`.

- **Role Assignment & Access Control:**
  - Available roles: `buyer` (default), `artist` (requires verification), `admin` (manually assigned).
  - After email verification, users select a role via `/api/select-role` (protected endpoint):
    - Selecting `buyer` sets `status = verified`, keeps `role = buyer`.
    - Selecting `artist` sets `status = pending_verification`, requiring document submission via `/api/upload-artist-docs`.
  - Artist verification process:
    - Users upload ID and portfolio documents (`/api/upload-artist-docs`).
    - Admins review submissions via `/api/admin/artist-requests/:requestId/review`. Approval sets `role = artist`, `status = verified`, and updates Keycloak role mappings. Rejection retains `role = buyer` with a rejection reason provided.
  - Role-based permissions:
    - `buyer`: Can place orders (`/api/orders`), submit reviews (`/api/reviews`), and send messages (`/api/messages`).
    - `artist`: Can create/edit artworks (`/api/artworks`), manage profile (`/api/artists`), and receive payment notifications.
    - `admin`: Can update order status (`/api/orders/:id/status`), payment status (`/api/payments/:id/status`), manage categories (`/api/categories`), and review artist requests.
  - Keycloak enforces role-based access via JWTs, using `keycloak.protect('realm:role')` middleware for protected routes.

- **Trust Level & Reputation:**
  - Trust levels: `NEW` (0), `VERIFIED` (1), `TRUSTED` (2), `BANNED` (3).
  - New users start at `NEW`. Email verification advances to `VERIFIED`.
  - Completing orders without disputes may increase trust to `TRUSTED` (via `updateUserTrustAfterOrder`).
  - Ordering requires at least `VERIFIED` status, enforced by `requireTrustLevel(TRUST_LEVELS.VERIFIED)` middleware.
  - `BANNED` users are blocked from actions except viewing public data.

### **Data Integrity & Consistency**

- **Database Constraints:**
  - Foreign keys ensure referential integrity:
    - `artworks` references `users` (artist_id) and `categories`.
    - `orders` references `users` (buyer_id) and `artworks`.
    - `payments` references `orders`.
    - `artist_requests` references `users`.
  - `artwork_images` table links multiple images to `artworks` with unique file paths.
  - `artist_requests` stores ID hash, portfolio file path, and optional selfie path.

- **Audit Logging:**
  - Critical actions are logged for traceability (stored in `audit_logs` table):
    - User profile updates (`/api/users/me`).
    - Role changes (`/api/select-role`).
    - Artist request reviews (`/api/admin/artist-requests/:requestId/review`).
    - Order creation/updates (`/api/orders`).
    - Payment status changes (`/api/payments/:id/status`).
  - Logs include user ID, action type, timestamp, and relevant metadata.

### **Order, Payment & Transaction Workflow**

- **Order Processing:**
  - Only users with `VERIFIED` trust level can place orders (`/api/orders`), specifying `artwork_id` and `total_amount`.
  - Order statuses: `pending`, `completed`, `canceled`. Only admins can update status via `/api/orders/:id/status`.
  - Orders are linked to `order_items` (for multiple artworks) and `payments` tables for tracking.

- **Payment Management:**
  - Payments are initiated via `/api/payments`, requiring `order_id`, `amount`, and `payment_method` (`paypal`, `orange_money`, `myzaka`).
  - Payment statuses: `pending`, `completed`, `failed`. Admins update status via `/api/payments/:id/status`.
  - Supported payment methods:
    - PayPal: Uses sandbox API for testing; completed payments trigger webhook callbacks (`/payment-callback`).
    - Orange Money/MyZaka: USSD-based, requires manual confirmation via `/api/payments/confirm`.
  - Successful payments notify artists via email and system message (sent by `SYSTEM_USER_ID`).

### **Artwork & Media Handling**

- **Artwork Creation & Management:**
  - Only users with `artist` role can create artworks via `/api/artworks`, requiring `title`, `price`, `category_id`, and at least one image.
  - Additional images (up to 5 per artwork) can be uploaded via `/api/artworks/:id/images`.
  - Artists can edit (`PUT /api/artworks/:id`) or delete (`DELETE /api/artworks/:id`) their own artworks, enforced by `keycloak.protect('realm:artist')`.
  - Admins can delete artworks for policy violations.

- **Image Storage:**
  - Artwork images are stored locally at `./uploads/` with timestamped filenames (e.g., `artwork-uuid-timestamp.jpg`).
  - Artist verification documents are stored at `./uploads/artist_verification/` with filenames like `keycloak_id-timestamp.ext`.
  - Supported formats: PDF, JPG, JPEG, PNG (max 5MB for verification documents).
  - File paths are saved in `artwork_images` (for artworks) or `artist_requests` (for verification).

### **Reviews & Messaging**

- **Reviews:**
  - Buyers can submit reviews via `/api/reviews`, requiring `artwork_id`, `rating` (1-5), and optional `comment`.
  - Reviews are only allowed for artworks purchased by the user, verified by checking `orders` table.

- **Messaging:**
  - Authenticated users can send messages via `/api/messages`, specifying `receiver_id` and `content`.
  - System-generated messages (e.g., payment confirmations) are sent using `SYSTEM_USER_ID`.

### **Security & Anti-Abuse Measures**

- **Rate Limiting & CAPTCHA:**
  - Rate limiters are applied to sensitive endpoints:
    - `registrationLimiter`: `/api/pre-register`, `/api/verify-email-code` (10 requests/hour).
    - `authPostLimiter`: `/api/select-role`, `/api/upload-artist-docs` (5 requests/min).
    - `orderLimiter`: `/api/orders` (3 requests/min).
  - Google reCAPTCHA v3 protects `/api/pre-register` from automated abuse.

- **Data Security:**
  - Passwords are managed and hashed by Keycloak—never stored in the app DB.
  - HTTPS is required in production (enforced via `cookie.secure = true`).
  - JWTs include `sub` (user ID) and `realm_access.roles` for authorization, validated by `keycloak.protect()`.

- **Session & Token Management:**
  - Sessions are stored in PostgreSQL using `connect-pg-simple` for persistence.
  - Keycloak tokens include user roles and expire based on realm settings (default: 1 hour).

### **Overall Workflow**

1. **User Registration & Verification:**
   - User signs up via `/api/pre-register` with email, password, and reCAPTCHA token.
   - Receives and submits 6-digit code via `/api/verify-email-code`, setting `is_verified = true`, `status = pending_role_selection`.

2. **Role Selection:**
   - User selects role via `/api/select-role`:
     - `buyer`: Sets `status = verified`, ready to shop.
     - `artist`: Sets `status = pending_verification`, prompts document upload (`/api/upload-artist-docs`).
   - Admins review artist requests (`/api/admin/artist-requests/:requestId/review`), updating `role` and Keycloak mappings on approval.

3. **Core Actions by Role:**
   - **Buyers**: Place orders (`/api/orders`), submit reviews (`/api/reviews`), send messages (`/api/messages`).
   - **Artists**: Create/edit artworks (`/api/artworks`), update profile (`/api/artists/:id`), receive sale notifications.
   - **Admins**: Manage orders, payments, categories, and artist approvals.

4. **Transaction Flow:**
   - Buyer places order → Initiates payment → Admin confirms payment status.
   - Completed payments trigger artist notifications (email + message).

5. **Security & Integrity:**
   - Rate limiting, reCAPTCHA, JWT validation, and trust levels ensure a secure platform.
   - Audit logs track all critical actions for accountability.

---